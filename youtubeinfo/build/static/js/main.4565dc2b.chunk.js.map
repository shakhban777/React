{"version":3,"sources":["components/result/result-item.jsx","components/result/results.jsx","components/search/search.jsx","components/app/app.jsx","index.js"],"names":["ResultItem","videoName","author","date","views","videoId","parsedDate","toString","neededDate","Date","toLocaleString","day","year","month","hour","minute","second","videoUrl","className","Accordion","defaultActiveKey","Card","Toggle","as","Header","eventKey","Body","Title","Subtitle","Collapse","title","width","height","src","frameBorder","allow","allowFullScreen","Results","items","search","elements","map","item","id","key","Search","onChange","onSubmit","value","Form","Group","controlId","Label","Control","type","placeholder","Button","variant","App","state","api","maxResults","orderBy","baseURL","apiKey","e","setState","target","preventDefault","this","updateItems","prevProps","prevState","snapshot","a","fetch","response","json","data","etag","snippet","publishTime","channelTitle","newItems","forEach","then","statistics","viewCount","view","itemWithView","oldItems","idx","findIndex","el","sortedItems","slice","sort","b","catch","err","TypeError","console","log","toRender","Jumbotron","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4565dc2b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Accordion, Card} from \"react-bootstrap\";\r\nimport './result.scss';\r\n\r\nconst ResultItem = ({videoName, author, date, views, videoId}) => {\r\n   const parsedDate = date.toString();\r\n   const neededDate = new Date(parsedDate).toLocaleString(\"ru\", {\r\n      day: 'numeric',\r\n      year: 'numeric',\r\n      month: 'long',\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n      second: \"numeric\"\r\n   });\r\n   const videoUrl = `https://www.youtube.com/embed/${videoId}`\r\n\r\n   return (\r\n      <li className='list-group-item'>\r\n         <Accordion defaultActiveKey=\"1\">\r\n            <Card>\r\n               <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                  <Card.Body className='description'>\r\n                     <Card.Title>{videoName}</Card.Title>\r\n                     <Card.Subtitle className=\"mb-3\">Автор: <span className='text-muted'>{author}</span></Card.Subtitle>\r\n                     <Card.Subtitle className=\"mb-3\">Загружено: <span className='text-muted'>{neededDate}</span></Card.Subtitle>\r\n                     <Card.Subtitle className=\"mb-3\">Просмотров: <span className='text-muted'>{views}</span></Card.Subtitle>\r\n                  </Card.Body>\r\n               </Accordion.Toggle>\r\n               <Accordion.Collapse eventKey=\"0\" className='accord'>\r\n                  <iframe title={videoId} width=\"720\" height=\"480\" src={videoUrl} frameBorder=\"0\"\r\n                          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                          allowFullScreen>\r\n                  </iframe>\r\n               </Accordion.Collapse>\r\n            </Card>\r\n         </Accordion>\r\n      </li>\r\n   );\r\n}\r\nexport default ResultItem;","import React from \"react\";\r\nimport ResultItem from \"./result-item\";\r\n\r\nconst Results = ({ items, search }) => {\r\n\r\n   const elements = items.map(item => {\r\n      const {id, ...items} = item;\r\n      return (\r\n         <ResultItem {...items} key={id}/>\r\n      );\r\n   });\r\n\r\n   return (\r\n      <div className='result'>\r\n         <p>Результат поиска по запросу: \"{search}\"</p>\r\n         <ul className='list-group'>\r\n            {elements}\r\n         </ul>\r\n      </div>\r\n   );\r\n\r\n}\r\n\r\nexport default Results;","import React from \"react\";\r\nimport { Button, Form } from 'react-bootstrap';\r\n\r\nconst Search = ({ onChange, onSubmit, value }) => {\r\n   return (\r\n      <Form className='mb-5' onSubmit={onSubmit}>\r\n         <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>Поиск видео</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Введите название\" onChange={onChange} value={value}/>\r\n         </Form.Group>\r\n         <Button variant=\"primary\" type=\"submit\">\r\n            Поиск\r\n         </Button>\r\n      </Form>\r\n   );\r\n};\r\n\r\nexport default Search;","import React, {Component} from 'react';\r\nimport {Jumbotron} from 'react-bootstrap';\r\nimport Results from \"../result/results\";\r\nimport Search from \"../search/search\";\r\nimport './app.scss';\r\n\r\nexport default class App extends Component {\r\n   state = {\r\n      value: '',\r\n      search: '',\r\n      api: {\r\n         maxResults: 10,\r\n         orderBy: 'date',\r\n         baseURL: 'https://youtube.googleapis.com/youtube/v3/search?',\r\n         apiKey: 'AIzaSyAZ9HXwcvjwkjV3mUA6z4JHlU-ASd1uy2g'\r\n      },\r\n      items: []\r\n   };\r\n\r\n   componentDidMount() {\r\n      this.updateItems();\r\n   }\r\n\r\n   componentDidUpdate(prevProps, prevState, snapshot) {\r\n      if (prevState.search !== this.state.search) {\r\n         this.updateItems();\r\n      }\r\n   }\r\n\r\n   updateItems() {\r\n      const {baseURL, maxResults, apiKey, orderBy} = this.state.api;\r\n      const {search} = this.state;\r\n\r\n      (async () => {\r\n         try {\r\n            const response = await fetch(`${baseURL}part=snippet&maxResults=${maxResults}&order=${orderBy}&q=${search}&key=${apiKey}`);\r\n            const data = await response.json();\r\n            //add items\r\n            const newItems =\r\n               await data.items.map(item => {\r\n                  return {\r\n                     id: item.etag,\r\n                     videoId: item.id.videoId,\r\n                     date: item.snippet.publishTime,\r\n                     videoName: item.snippet.title,\r\n                     author: item.snippet.channelTitle,\r\n                     // url:\r\n                  };\r\n               });\r\n            await this.setState({items: [...newItems]});\r\n\r\n            // add field views\r\n            await newItems.forEach(item => {\r\n               fetch(`https://www.googleapis.com/youtube/v3/videos?part=statistics&id=${item.videoId}&key=${this.state.api.apiKey}`)\r\n                  .then(response => response.json())\r\n                  .then(data => data.items[0].statistics.viewCount)\r\n                  .then(view => {\r\n                     const itemWithView = {...item, views: view};\r\n                     const oldItems = [...this.state.items];\r\n                     const idx = oldItems.findIndex(el => el.id === item.id)\r\n\r\n                     const newItems = [...oldItems.slice(0, idx), itemWithView, ...oldItems.slice(idx + 1)];\r\n\r\n                     //sorting items\r\n                     const sortedItems = newItems.sort(function (a, b) {\r\n                        return b.views - a.views;\r\n                     })\r\n\r\n                     this.setState({items: sortedItems})\r\n                  })\r\n                  .catch(err => {\r\n                     if (err instanceof TypeError) {\r\n                        console.log('Отсутствует данные \"statistics\", видео еще не обработано сервером');\r\n                     }\r\n                  })\r\n            })\r\n         } catch (err) {\r\n            console.err(err);\r\n         }\r\n      })()\r\n   }\r\n\r\n   onChange = (e) => {\r\n      this.setState({value: e.target.value});\r\n   }\r\n\r\n   onSubmit = (e) => {\r\n      e.preventDefault();\r\n      if (!this.state.value) return\r\n      this.setState({search: this.state.value});\r\n      this.setState({value: ''});\r\n   }\r\n\r\n   render() {\r\n      const {items, value, search} = this.state;\r\n      const toRender = search\r\n         ? (<Jumbotron>\r\n               <Search value={value} onChange={this.onChange} onSubmit={this.onSubmit}/>\r\n               <Results items={items} search={search}/>\r\n            </Jumbotron>)\r\n         : (<Jumbotron>\r\n               <Search value={value} onChange={this.onChange} onSubmit={this.onSubmit}/>\r\n            </Jumbotron>)\r\n\r\n      return (\r\n         <div className='container app'>\r\n            {toRender}\r\n         </div>\r\n      );\r\n\r\n   }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/app/app\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}